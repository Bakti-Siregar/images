library(timeSeries)
library(fPortfolio)
library(quantmod)
library(caTools)
library(dplyr)
library(PerformanceAnalytics)
library(ggplot2)
require(plotly)
library(xts)
# 7. Monthly Return
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c2<-c("UNTR.JK","SMGR.JK","LPPF.JK","INTP.JK","BBCA.JK") %>%
lapply(function(x) getSymbols.yahoo(x, from="2014-01-01", auto.assign=FALSE)[,4])%>%      # hitung return : harian
lapply(function(x) monthlyReturn(x))
portfolioReturns <- do.call(merge, c2)
portfolioReturns <- portfolioReturns[apply(portfolioReturns,1,function(x) all(!is.na(x))),] # hapus semua data tanpa harga (jika ada)
colnames(portfolioReturns) <- c("UNTR","SMGR","LPPF","INTP","BBCA")
portfolioReturns <- as.timeSeries(portfolioReturns)
effFrontier <- portfolioFrontier(portfolioReturns, constraints = "LongOnly")      #  Portofolio Efisiennya
plot(effFrontier,c(1,2,3,4))
frontierWeights <- getWeights(effFrontier)
risk_return <- frontierPoints(effFrontier)
cor_matrix <- cor(portfolioReturns)                                                                           # korelasi matriks
cov_matrix <- cov(portfolioReturns)
riskReturnPoints <- frontierPoints(effFrontier)                                                               # dapatkan risiko dan kembalikan nilai untuk titik di perbatasan efisien
annualizedPoints <- data.frame(targetRisk=riskReturnPoints[, "targetRisk"] * sqrt(252),
targetReturn=riskReturnPoints[,"targetReturn"] * 252)
plot(annualizedPoints)                                                                                        # Annualize poin
riskFreeRate <- 0                                                                                             # plot rasio Sharpe untuk setiap titik di perbatasan efisien
plot((annualizedPoints[,"targetReturn"]-riskFreeRate) / annualizedPoints[,"targetRisk"],
xlab="point on efficient frontier", ylab="Sharpe ratio")
# Plot Frontier Weights (Perlu untuk mentranspose matriks terlebih dahulu)
barplot(t(frontierWeights), main="Frontier Weights", col=cm.colors(ncol(frontierWeights)+2),legend=colnames(frontierWeights))
mvp <- minvariancePortfolio(portfolioReturns, spec=portfolioSpec(), constraints="LongOnly")                   # Portpolio Variasi Minimum
tangencyPort <- tangencyPortfolio(portfolioReturns, spec=portfolioSpec(), constraints="LongOnly")             # Portpolio Tangensial
mvpweights <- getWeights(mvp)
tangencyweights <- getWeights(tangencyPort)
# Ekstrak nilai beresiko
covRisk(portfolioReturns, mvpweights)
varRisk(portfolioReturns, mvpweights, alpha = 0.05)
cvarRisk(portfolioReturns, mvpweights, alpha = 0.05)
#ggplot MVP Weights : Bar-chart
df <- data.frame(mvpweights)
assets <- colnames(frontierWeights)
ggplot(data=df, aes(x=assets, y=mvpweights, fill=assets)) +
geom_bar(stat="identity", position=position_dodge(),colour="black") +
geom_text(aes(label=sprintf("%.02f %%",mvpweights*100)),
position=position_dodge(width=0.9), vjust=-0.25, check_overlap = TRUE) +
ggtitle("Optimal Portfolio with Minimum Variance")+ theme(plot.title = element_text(hjust = 0.5)) +
labs(x= "Assets", y = "Weight (%)")
dft <- data.frame(tangencyweights)
assets <- colnames(frontierWeights)
ggplot(data=dft, aes(x=assets, y=tangencyweights, fill=assets)) +
geom_bar(stat="identity", position=position_dodge(),colour="black") +
geom_text(aes(label=sprintf("%.02f %%",tangencyweights*100)),
position=position_dodge(width=0.9), vjust=-0.25, check_overlap = TRUE) +
ggtitle("Tangency Portfolio Weights")+ theme(plot.title = element_text(hjust = 0.5)) +
labs(x= "Assets", y = "Weight (%)")
#Set Specs
Spec = portfolioSpec()
setSolver(Spec) = "solveRshortExact"
setTargetRisk(Spec) = .12
constraints <- c("minW[1:length(stock)]=-1","maxW[1:length(stock)]=.60", "Short")
effFrontierShort <- portfolioFrontier(portfolioReturns, Spec, constraints = constraints)
weights <- getWeights(effFrontierShort)
colnames(weights) <- c("UNTR","SMGR","LPPF","INTP","BBCA")
plot(effFrontierShort, c(1, 2, 3))
#Plot Frontier Weights (Need to transpose matrix first)
barplot(t(weights), main="Frontier Weights", col=cm.colors(ncol(weights)+2), legend=colnames(weights))
effPortShort <- minvariancePortfolio(portfolioReturns, Spec, constraints=constraints)
optWeights <- getWeights(effPortShort)
tanPortShort <- tangencyPortfolio(portfolioReturns, Spec, constraints=constraints)
tanWeights <- getWeights(tanPortShort)
maxR <- maxreturnPortfolio(portfolioReturns , Spec, constraints=constraints)
maxWeights <- getWeights(maxR)
#ggplot MVP Weights
df <- data.frame(optWeights)
assets <- colnames(frontierWeights)
ggplot(data=df, aes(x=assets, y=optWeights, fill=assets)) +
geom_bar(stat="identity", position=position_dodge(),colour="black") +
geom_text(aes(label=sprintf("%.02f %%",optWeights*100)),
position=position_dodge(width=0.9), vjust=-0.25, check_overlap = TRUE) +
ggtitle("Optimal Portfolio With Shorts Allowed")+ theme(plot.title = element_text(hjust = 0.5)) +
labs(x= "Assets", y = "Weight (%)")
dft <- data.frame(tanWeights)
assets <- colnames(frontierWeights)
ggplot(data=dft, aes(x=assets, y=tanWeights, fill=assets)) +
geom_bar(stat="identity", position=position_dodge(),colour="black") +
geom_text(aes(label=sprintf("%.02f %%",tanWeights*100)),
position=position_dodge(width=0.9), vjust=-0.25, check_overlap = TRUE) +
ggtitle("Tangency Portfolio With Shorts Allowed")+ theme(plot.title = element_text(hjust = 0.5)) +
labs(x= "Assets", y = "Weight (%)")
# 10. Monthly Return
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c3<-c("ADHI.JK","ASII.JK","BSDE.JK","ELSA.JK","EXCL.JK","INDF.JK",
"JSMR.JK","KLBF.JK","MNCN.JK","PGAS.JK","PTPP.JK","SCMA.JK") %>%
lapply(function(x) getSymbols.yahoo(x, from="2014-01-01", auto.assign=FALSE)[,4])%>%      # hitung return : harian
lapply(function(x) monthlyReturn(x))
portfolioReturns <- do.call(merge, c3)
portfolioReturns <- portfolioReturns[apply(portfolioReturns,1,function(x) all(!is.na(x))),] # hapus semua data tanpa harga (jika ada)
colnames(portfolioReturns) <- c("ADHI","ASII","BSDE","ELSA","EXCL","INDF",
"JSMR","KLBF","MNCN","PGAS","PTPP","SCMA")
portfolioReturns <- as.timeSeries(portfolioReturns)
write.csv(portfolioReturns,"portfolioReturns.csv")
effFrontier <- portfolioFrontier(portfolioReturns, constraints = "LongOnly")      #  Portofolio Efisiennya
plot(effFrontier,c(1,2,3,4))
frontierWeights <- getWeights(effFrontier)
risk_return <- frontierPoints(effFrontier)
cor_matrix <- cor(portfolioReturns)                                                                           # korelasi matriks
cov_matrix <- cov(portfolioReturns)
riskReturnPoints <- frontierPoints(effFrontier)                                                               # dapatkan risiko dan kembalikan nilai untuk titik di perbatasan efisien
annualizedPoints <- data.frame(targetRisk=riskReturnPoints[, "targetRisk"] * sqrt(252),
targetReturn=riskReturnPoints[,"targetReturn"] * 252)
plot(annualizedPoints)                                                                                        # Annualize poin
riskFreeRate <- 0                                                                                             # plot rasio Sharpe untuk setiap titik di perbatasan efisien
plot((annualizedPoints[,"targetReturn"]-riskFreeRate) / annualizedPoints[,"targetRisk"],
xlab="point on efficient frontier", ylab="Sharpe ratio")
# Plot Frontier Weights (Perlu untuk mentranspose matriks terlebih dahulu)
barplot(t(frontierWeights), main="Frontier Weights", col=cm.colors(ncol(frontierWeights)+2),legend=colnames(frontierWeights))
mvp <- minvariancePortfolio(portfolioReturns, spec=portfolioSpec(), constraints="LongOnly")                   # Portpolio Variasi Minimum
tangencyPort <- tangencyPortfolio(portfolioReturns, spec=portfolioSpec(), constraints="LongOnly")             # Portpolio Tangensial
mvpweights <- getWeights(mvp)
tangencyweights <- getWeights(tangencyPort)
# Ekstrak nilai beresiko
covRisk(portfolioReturns, mvpweights)
varRisk(portfolioReturns, mvpweights, alpha = 0.05)
cvarRisk(portfolioReturns, mvpweights, alpha = 0.05)
#ggplot MVP Weights : Bar-chart
df <- data.frame(mvpweights)
assets <- colnames(frontierWeights)
ggplot(data=df, aes(x=assets, y=mvpweights, fill=assets)) +
geom_bar(stat="identity", position=position_dodge(),colour="black") +
geom_text(aes(label=sprintf("%.02f %%",mvpweights*100)),
position=position_dodge(width=0.9), vjust=-0.25, check_overlap = TRUE) +
ggtitle("Optimal Portfolio with Minimum Variance")+ theme(plot.title = element_text(hjust = 0.5)) +
labs(x= "Assets", y = "Weight (%)")
dft <- data.frame(tangencyweights)
assets <- colnames(frontierWeights)
ggplot(data=dft, aes(x=assets, y=tangencyweights, fill=assets)) +
geom_bar(stat="identity", position=position_dodge(),colour="black") +
geom_text(aes(label=sprintf("%.02f %%",tangencyweights*100)),
position=position_dodge(width=0.9), vjust=-0.25, check_overlap = TRUE) +
ggtitle("Tangency Portfolio Weights")+ theme(plot.title = element_text(hjust = 0.5)) +
labs(x= "Assets", y = "Weight (%)")
comparison<-c("ELSA.JK","EXCL.JK","INDF.JK","KLBF.JK","BBCA.Jk","UNTR.JK","PTPP.JK") %>%
lapply(function(x) getSymbols.yahoo(x, from="2014-01-01", auto.assign=FALSE)[,4])%>%      # hitung return : harian
lapply(function(x) monthlyReturn(x))
portfolioReturns <- do.call(merge, comparison)
portfolioReturns <- portfolioReturns[apply(portfolioReturns,1,function(x) all(!is.na(x))),] # hapus semua data tanpa harga (jika ada)
colnames(portfolioReturns) <- c("ELSA","EXCL","INDF","KLBF","BBCA","UNTR","PTPP")
portfolioReturns <- as.timeSeries(portfolioReturns)
# plot(portfolioReturns)  (understrcuture)
effFrontier <- portfolioFrontier(portfolioReturns, constraints = "LongOnly")      #  Portofolio Efisiennya
plot(effFrontier,c(1,2,3,4))
# Opsi plot batas sebagai berikut:
#'1: Plot Efficient Frontier
#'2: Plot Minimum Variance Portfolio
#'3: Plot Tangency Portfolio
#'4: Plot Risk Returns of Each Asset
#'5: Plot Equal Weights Portfolio
#'6: Plot Two Asset Frontiers (Long)
#'7: Plot Monte Carlo Portfolios
#'8: Plot Sharpe Ratio
# 13. Plot Frontier Weights (Dapat Menyesuaikan Jumlah Poin)
# mendapatkan alokasi untuk setiap instrumen untuk setiap titik pada kurva tapal batas efisien
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
frontierWeights <- getWeights(effFrontier)
risk_return <- frontierPoints(effFrontier)
cor_matrix <- cor(portfolioReturns)                                                                           # korelasi matriks
cov_matrix <- cov(portfolioReturns)
riskReturnPoints <- frontierPoints(effFrontier)                                                               # dapatkan risiko dan kembalikan nilai untuk titik di perbatasan efisien
annualizedPoints <- data.frame(targetRisk=riskReturnPoints[, "targetRisk"] * sqrt(252),
targetReturn=riskReturnPoints[,"targetReturn"] * 252)
plot(annualizedPoints)                                                                                        # Annualize poin
riskFreeRate <- 0                                                                                             # plot rasio Sharpe untuk setiap titik di perbatasan efisien
plot((annualizedPoints[,"targetReturn"]-riskFreeRate) / annualizedPoints[,"targetRisk"],
xlab="point on efficient frontier", ylab="Sharpe ratio")
# Plot Frontier Weights (Perlu untuk mentranspose matriks terlebih dahulu)
barplot(t(frontierWeights), main="Frontier Weights", col=cm.colors(ncol(frontierWeights)+2),legend=colnames(frontierWeights))
mvp <- minvariancePortfolio(portfolioReturns, spec=portfolioSpec(), constraints="LongOnly")                   # Portpolio Variasi Minimum
tangencyPort <- tangencyPortfolio(portfolioReturns, spec=portfolioSpec(), constraints="LongOnly")             # Portpolio Tangensial
mvpweights <- getWeights(mvp)
tangencyweights <- getWeights(tangencyPort)
# Ekstrak nilai beresiko
covRisk(portfolioReturns, mvpweights)
varRisk(portfolioReturns, mvpweights, alpha = 0.05)
cvarRisk(portfolioReturns, mvpweights, alpha = 0.05)
#ggplot MVP Weights : Bar-chart
df <- data.frame(mvpweights)
assets <- colnames(frontierWeights)
ggplot(data=df, aes(x=assets, y=mvpweights, fill=assets)) +
geom_bar(stat="identity", position=position_dodge(),colour="black") +
geom_text(aes(label=sprintf("%.02f %%",mvpweights*100)),
position=position_dodge(width=0.9), vjust=-0.25, check_overlap = TRUE) +
ggtitle("Optimal Portfolio with Minimum Variance")+ theme(plot.title = element_text(hjust = 0.5)) +
labs(x= "Assets", y = "Weight (%)")
dft <- data.frame(tangencyweights)
assets <- colnames(frontierWeights)
ggplot(data=dft, aes(x=assets, y=tangencyweights, fill=assets)) +
geom_bar(stat="identity", position=position_dodge(),colour="black") +
geom_text(aes(label=sprintf("%.02f %%",tangencyweights*100)),
position=position_dodge(width=0.9), vjust=-0.25, check_overlap = TRUE) +
ggtitle("Tangency Portfolio Weights")+ theme(plot.title = element_text(hjust = 0.5)) +
labs(x= "Assets", y = "Weight (%)")
#Set Specs
Spec = portfolioSpec()
setSolver(Spec) = "solveRshortExact"
setTargetRisk(Spec) = .12
constraints <- c("minW[1:length(stock)]=-1","maxW[1:length(stock)]=.60", "Short")
effFrontierShort <- portfolioFrontier(portfolioReturns, Spec, constraints = constraints)
weights <- getWeights(effFrontierShort)
colnames(weights) <- c("ELSA","EXCL","INDF","KLBF","BBCA","UNTR","PTPP")
plot(effFrontierShort, c(1, 2, 3))
#Plot Frontier Weights (Need to transpose matrix first)
barplot(t(weights), main="Frontier Weights", col=cm.colors(ncol(weights)+2), legend=colnames(weights))
effPortShort <- minvariancePortfolio(portfolioReturns, Spec, constraints=constraints)
optWeights <- getWeights(effPortShort)
tanPortShort <- tangencyPortfolio(portfolioReturns, Spec, constraints=constraints)
tanWeights <- getWeights(tanPortShort)
maxR <- maxreturnPortfolio(portfolioReturns , Spec, constraints=constraints)
maxWeights <- getWeights(maxR)
#ggplot MVP Weights
df <- data.frame(optWeights)
assets <- colnames(frontierWeights)
ggplot(data=df, aes(x=assets, y=optWeights, fill=assets)) +
geom_bar(stat="identity", position=position_dodge(),colour="black") +
geom_text(aes(label=sprintf("%.02f %%",optWeights*100)),
position=position_dodge(width=0.9), vjust=-0.25, check_overlap = TRUE) +
ggtitle("Optimal Portfolio With Shorts Allowed")+ theme(plot.title = element_text(hjust = 0.5)) +
labs(x= "Assets", y = "Weight (%)")
dft <- data.frame(tanWeights)
assets <- colnames(frontierWeights)
ggplot(data=dft, aes(x=assets, y=tanWeights, fill=assets)) +
geom_bar(stat="identity", position=position_dodge(),colour="black") +
geom_text(aes(label=sprintf("%.02f %%",tanWeights*100)),
position=position_dodge(width=0.9), vjust=-0.25, check_overlap = TRUE) +
ggtitle("Tangency Portfolio With Shorts Allowed")+ theme(plot.title = element_text(hjust = 0.5)) +
labs(x= "Assets", y = "Weight (%)")
knitr::opts_chunk$set(collapse = TRUE,comment = "#>")
options(tinytex.verbose = TRUE)
library(dplyr)
jabodetabek <- read.csv("https://raw.githubusercontent.com/Bakti-Siregar/Structure-Data-and-Algorithm-/master/jabodetabek.csv")
head(jabodetabek)
library(dplyr)
jabodetabek <- read.csv("https://raw.githubusercontent.com/Bakti-Siregar/Structure-Data-and-Algorithm-/master/jabodetabek.csv")
head(jabodetabek)
dim(jabodetabek)
str(jabodetabek)
names(jabodetabek)[2:5]                              # by numerical indices
subset <- select(jabodetabek, city:date)             # the names directly
head(subset)                                         # print out some dataset
negative <- select(jabodetabek,-c(id,debit:deposit)) # the negative sign
head(negative, 15)                                   # print out some dataset
names(jabodetabek)[2:5]                              # by numerical indices
subset <- select(jabodetabek, city:date)             # the names directly
head(subset)                                         # print out some dataset
negative <- select(jabodetabek,-c(id,debit:deposit)) # the negative sign
head(negative)                                       # print out some dataset
names(jabodetabek)[2:5]                              # by numerical indices
select1 <- select(jabodetabek, city:date)            # the names directly
head(select1)                                        # print out some dataset
select2 <- select(jabodetabek,-c(id,debit:deposit))  # the negative sign
head(select2)                                        # print out some dataset
select3 <- select(jabodetabek, -c(name,id))
head(select3)
select4 <- select(jabodetabek, city == "Jakarta")
select4 <- filter(jabodetabek, city == "Jakarta")
head(select4)
select5 <- filter(jabodetabek, name == "Alex")
select5
no_debit <- filter(jabodetabek, debit == 0 & debit == "" )
no_debit
no_debit <- filter(jabodetabek, debit == 0 & debit == "NA" )
no_debit
no_debit <- filter(jabodetabek, debit > 500)
no_debit
library(dplyr)
jabodetabek <- read.csv("https://raw.githubusercontent.com/Bakti-Siregar/Structure-Data-and-Algorithm-/master/jabodetabek.csv")
jabodetabek<-as.data.frame(jabodetabek)
head(jabodetabek)
dim(jabodetabek)
str(jabodetabek)
library(dplyr)
jabodetabek <- read.csv("https://raw.githubusercontent.com/Bakti-Siregar/Structure-Data-and-Algorithm-/master/jabodetabek.csv")
head(jabodetabek)
dim(jabodetabek)
str(jabodetabek)
library(dplyr)
jabodetabek <- read.csv("https://raw.githubusercontent.com/Bakti-Siregar/Structure-Data-and-Algorithm-/master/jabodetabek.csv")
head(jabodetabek)
dim(jabodetabek)
str(jabodetabek)
id->select(jabodetabek,id)
library(dplyr)
jabodetabek <- read.csv("https://raw.githubusercontent.com/Bakti-Siregar/Structure-Data-and-Algorithm-/master/jabodetabek.csv")
head(jabodetabek)
dim(jabodetabek)
str(jabodetabek)
id->select(jabodetabek,id)
id<-select(jabodetabek,id)
id<-select(jabodetabek,id)
id
id<-select(jabodetabek,id)
city<-select(jabodetabek,city)
gender<-select(jabodetabek,gender)
name<-select(jabodetabek,name)
date<-as.date(select(jabodetabek,date))
id<-select(jabodetabek,id)
city<-select(jabodetabek,city)
gender<-select(jabodetabek,gender)
name<-select(jabodetabek,name)
date<-as.Date(select(jabodetabek,date))
id<-select(jabodetabek,id)
city<-select(jabodetabek,city)
gender<-select(jabodetabek,gender)
name<-select(jabodetabek,name)
date<-as.Date.default(select(jabodetabek,date))
id<-select(jabodetabek,id)
city<-select(jabodetabek,city)
gender<-select(jabodetabek,gender)
name<-select(jabodetabek,name)
date<-as.Date.timeDate(select(jabodetabek,date))
knitr::opts_chunk$set(collapse = TRUE,comment = "#>")
options(tinytex.verbose = TRUE)
chicago <- readRDS("chicago.rds")            # read data using RDS
dim(chicago)                                 # looking for dimention of your data
str(chicago)                                 # looking for the structure of data
library(dplyr)
jabodetabek <- read.csv("https://raw.githubusercontent.com/Bakti-Siregar/Structure-Data-and-Algorithm-/master/jabodetabek.csv")
head(jabodetabek)
dim(jabodetabek)
str(jabodetabek)
library(dplyr)
jabodetabek <- read.csv("https://raw.githubusercontent.com/Bakti-Siregar/Structure-Data-and-Algorithm-/master/jabodetabek.csv")
head(jabodetabek)
dim(jabodetabek)
str(jabodetabek)
id<-select(jabodetabek,id)
city<-select(jabodetabek,city)
gender<-select(jabodetabek,gender)
name<-select(jabodetabek,name)
date<-as.Date.timeDate(select(jabodetabek,date))
id<-select(jabodetabek,id)
city<-select(jabodetabek,city)
gender<-select(jabodetabek,gender)
name<-select(jabodetabek,name)
date<-as.Date(select(jabodetabek,date))
id<-select(jabodetabek,id)
city<-select(jabodetabek,city)
gender<-select(jabodetabek,gender)
name<-select(jabodetabek,name)
date<-select(jabodetabek,date)
date
id<-select(jabodetabek,id)
city<-select(jabodetabek,city)
gender<-select(jabodetabek,gender)
name<-select(jabodetabek,name)
date<-select(jabodetabek,date)
class(date)
id<-select(jabodetabek,id)
city<-select(jabodetabek,city)
gender<-select(jabodetabek,gender)
name<-select(jabodetabek,name)
date<-select(jabodetabek,date)
date<-as.Date(character(select(jabodetabek,date)))
id<-select(jabodetabek,id)
city<-select(jabodetabek,city)
gender<-select(jabodetabek,gender)
name<-select(jabodetabek,name)
date<-select(jabodetabek,date)
date<-as.Date(date)
id<-select(jabodetabek,id)
city<-select(jabodetabek,city)
gender<-select(jabodetabek,gender)
name<-select(jabodetabek,name)
date<-select(jabodetabek,date)
date
library(dplyr)
jabodetabek <- read.csv("https://raw.githubusercontent.com/Bakti-Siregar/Structure-Data-and-Algorithm-/master/jabodetabek.csv")
head(jabodetabek)
dim(jabodetabek)
str(jabodetabek)
id<-select(jabodetabek,id)
city<-select(jabodetabek,city)
gender<-select(jabodetabek,gender)
name<-select(jabodetabek,name)
date<-as.Date(jabodetabek$date)
date
id<-select(jabodetabek,id)
city<-select(jabodetabek,city)
gender<-select(jabodetabek,gender)
name<-select(jabodetabek,name)
date<-as.Date(jabodetabek$date)
class(date)
id<-select(jabodetabek,id)
city<-select(jabodetabek,city)
gender<-select(jabodetabek,gender)
name<-select(jabodetabek,name)
date<-as.Date(jabodetabek$date)
debit<-as.integer(jabodetabek$debit)
credit<-as.integer(jabodetabek$credit)
deposit<-as.integer(jabodetabek$deposit)
class(deposit)
id<-select(jabodetabek,id)
city<-select(jabodetabek,city)
gender<-select(jabodetabek,gender)
name<-select(jabodetabek,name)
date<-as.Date(jabodetabek$date)
debit<-as.integer(jabodetabek$debit)
credit<-as.integer(jabodetabek$credit)
deposit<-as.integer(jabodetabek$deposit)
jabodetabek<-as.data.frame(id,city)
id<-select(jabodetabek,id)
city<-select(jabodetabek,city)
gender<-select(jabodetabek,gender)
name<-select(jabodetabek,name)
date<-as.Date(jabodetabek$date)
debit<-as.integer(jabodetabek$debit)
credit<-as.integer(jabodetabek$credit)
deposit<-as.integer(jabodetabek$deposit)
jabodetabek<-data.frame(id,city)
head(jabodetabek)
id<-select(jabodetabek,id)
city<-select(jabodetabek,city)
gender<-select(jabodetabek,gender)
id<-select(jabodetabek,id)
city<-select(jabodetabek,city)
gender<-select(jabodetabek,gender)
library(dplyr)
jabodetabek <- read.csv("https://raw.githubusercontent.com/Bakti-Siregar/Structure-Data-and-Algorithm-/master/jabodetabek.csv")
head(jabodetabek)
dim(jabodetabek)
str(jabodetabek)
id<-select(jabodetabek,id)
city<-select(jabodetabek,city)
gender<-select(jabodetabek,gender)
name<-select(jabodetabek,name)
date<-as.Date(jabodetabek$date)
debit<-as.integer(jabodetabek$debit)
credit<-as.integer(jabodetabek$credit)
deposit<-as.integer(jabodetabek$deposit)
jabodetabek<-data.frame(id,city,gender,name,date,debit,credit,deposit)
head(jabodetabek)
names(jabodetabek)[2:5]                              # by numerical indices
select1 <- select(jabodetabek, city:date)            # the names directly
head(select1)                                        # print out some dataset
select2 <- select(jabodetabek,-c(id,debit:deposit))  # the negative sign
head(select2)                                        # print out some dataset
select3 <- select(jabodetabek, -c(name,id))
head(select3)
select4 <- filter(jabodetabek, city == "Jakarta")
head(select4)
select5 <- filter(jabodetabek, name == "Alex")
select5
no_debit <- filter(jabodetabek, debit > 500)
no_debit
